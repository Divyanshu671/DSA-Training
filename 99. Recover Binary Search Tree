/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void traverse(TreeNode* root,vector<TreeNode*>& arr){
        if(!root) return;
        traverse(root->left,arr);
        arr.push_back(root);
        traverse(root->right,arr);
    }
    void recoverTree(TreeNode* root) {
        vector<TreeNode*> arr;
        traverse(root,arr);
        TreeNode* x=NULL;
        TreeNode* y=NULL;
        int i;
        for(i=0;i<arr.size()-1;i++){
            if(arr[i]->val>arr[i+1]->val){
                if(x==nullptr){
                    x = arr[i];
                    y = arr[i+1];
                }
                else{
                    y = arr[i+1];
                }
            }
        }
        swap(x->val,y->val);
    }
};
