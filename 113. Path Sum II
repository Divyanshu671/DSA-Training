/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> result;
        if(!root) return result;
        vector<int> path;
        path.push_back(root->val);
        Search(root,path,result,targetSum);
        return result;
    }
private:
  void Search(TreeNode* root,vector<int>& path,vector<vector<int>>& result,int s){
    if(!root->left && !root->right){
      int s1 = accumulate(path.begin(),path.end(),0);
      if(s1==s)
        result.push_back(path);
    }
    else{
      if(root->left){
        path.push_back(root->left->val);
        Search(root->left,path,result,s);
        path.pop_back();
      }
      if(root->right){
        path.push_back(root->right->val);
        Search(root->right,path,result,s);
        path.pop_back();
      }
    }
  }
};
