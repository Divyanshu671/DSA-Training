/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<vector<int>> result;
        vector<int> path;
        path.push_back(root->val);
        Search(root,path,result);
        int i,j;
        vector<string> g;
        for(i=0;i<result.size();i++){
            string s = "";
            for(j=0;j<result[i].size();j++){
                if(j!=0)
                    s+="->";
                s+=to_string(result[i][j]);
            }
            g.push_back(s);
        }
        return g;
    }
private:
    void Search(TreeNode* root,vector<int> path,vector<vector<int>>& result){
        if(!root->left && !root->right){
            result.push_back(path);
        }
        else{
            if(root->left){
                path.push_back(root->left->val);
                Search(root->left,path,result);
                path.pop_back();
            }
            if(root->right){
                path.push_back(root->right->val);
                Search(root->right,path,result);
                path.pop_back();
            }
        }
    }
};
