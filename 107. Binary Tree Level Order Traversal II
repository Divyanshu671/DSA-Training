/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> reverse(vector<vector<int>> & ans){
        vector<vector<int>> t;
        while(ans.size()){
            t.push_back(ans.back());
            ans.pop_back();
        }
        return t;
    }
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        deque<TreeNode*> q;
        vector<vector<int>> ans;
        if(!root){
            return ans;
        }
        q.push_back(root);
        int c;
        cout<<q[0]->val;
        while(q.size()){
            c=q.size();
            deque<TreeNode*> p;
            vector<int> t;
            while(c--){
                TreeNode * a = q.front();
                q.pop_front();
                t.push_back(a->val);
                if(a->left)
                    q.push_back(a->left);
                if(a->right)
                    q.push_back(a->right);
            }
            ans.push_back(t);
        }
        return reverse(ans);
    }
};
