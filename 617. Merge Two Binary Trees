/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(root1==NULL && root2==NULL)
            return NULL;
        if(!root1) return root2;
        if(!root2) return root1;
        queue<TreeNode*> q1;
        queue<TreeNode*> q2;
        q1.push(root1);
        q2.push(root2);
        TreeNode *t1,*t2;
        while(q1.size() || q2.size()){
            if(q1.size()){
                t1 = q1.front();
                q1.pop();
            }
            if(q2.size()){
                t2 = q2.front();
                q2.pop();
            }
            if(t1!=NULL && t2!=NULL){
                t1->val+=t2->val;
            }
            if(t1 && t2 && !t1->left && t2->left!=nullptr){
                t1->left = new TreeNode(0);
            }
            if(t1 && t2 && t1->left!=nullptr && !t2->left){
                t2->left = new TreeNode(0);
            }
            if(t1 && t2 && !t1->right && t2->right!=nullptr){
                t1->right = new TreeNode(0);
            }
            if(t1 && t2 && t1->right!=nullptr && !t2->right){
                t2->right = new TreeNode(0);
            }
            if(t1){
                q1.push(t1->left);
            }
            if(t1){
                q1.push(t1->right);
            }
            if(t2){
                q2.push(t2->left);
            }
            if(t2){
                q2.push(t2->right);
            }
        }
        return root1;
    }
};
